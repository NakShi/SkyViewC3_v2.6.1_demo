// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkyViewC3DB.Contexts;

namespace SkyViewC3DB.Migrations
{
    [DbContext(typeof(IMSContext))]
    [Migration("20200424005108_demoTest")]
    partial class demoTest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("SkyViewC3DB.Models.Box", b =>
                {
                    b.Property<string>("BoxID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOut")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("BoxID");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("SkyViewC3DB.Models.BoxAction", b =>
                {
                    b.Property<int>("BoxActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<string>("BoxID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RackID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("BoxActionID");

                    b.HasIndex("BoxID");

                    b.HasIndex("UserID");

                    b.HasIndex("RackID", "Position", "Time");

                    b.ToTable("BoxActions");
                });

            modelBuilder.Entity("SkyViewC3DB.Models.Rack", b =>
                {
                    b.Property<string>("RackID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("RackID");

                    b.ToTable("Racks");
                });

            modelBuilder.Entity("SkyViewC3DB.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SkyViewC3DB.Models.Vial", b =>
                {
                    b.Property<string>("VialID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOut")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("VialID");

                    b.ToTable("Vials");
                });

            modelBuilder.Entity("SkyViewC3DB.Models.VialAction", b =>
                {
                    b.Property<int>("VialActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<string>("BoxID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<string>("VialID")
                        .HasColumnType("TEXT");

                    b.HasKey("VialActionID");

                    b.HasIndex("UserID");

                    b.HasIndex("VialID");

                    b.HasIndex("BoxID", "Position", "Time");

                    b.ToTable("VialActions");
                });

            modelBuilder.Entity("SkyViewC3DB.Models.BoxAction", b =>
                {
                    b.HasOne("SkyViewC3DB.Models.Box", "Box")
                        .WithMany()
                        .HasForeignKey("BoxID");

                    b.HasOne("SkyViewC3DB.Models.Rack", "Rack")
                        .WithMany()
                        .HasForeignKey("RackID");

                    b.HasOne("SkyViewC3DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("SkyViewC3DB.Models.VialAction", b =>
                {
                    b.HasOne("SkyViewC3DB.Models.Box", "Box")
                        .WithMany()
                        .HasForeignKey("BoxID");

                    b.HasOne("SkyViewC3DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.HasOne("SkyViewC3DB.Models.Vial", "Vial")
                        .WithMany()
                        .HasForeignKey("VialID");
                });
#pragma warning restore 612, 618
        }
    }
}
